package net.java.games.input;

import java.io.IOException;
import java.io.InputStream;
import java.util.Objects;
import java.util.Properties;
import java.util.logging.Logger;

/**
 * <p>Provides access to the Maven properties of this implementation.</p>
 *
 * <p>
 *     These properties are loaded from the {@code pom.properties} file, which is generated by Maven during the build
 *     process.
 * </p>
 *
 * <p>
 *     Click <a href="https://maven.apache.org/guides/introduction/introduction-to-the-pom.html#Project_Properties">here</a>
 *     for more information on the Maven properties file.
 * </p>
 */
public final class PomProperties {
    /** Path to the Maven properties file, within the JAR. */
    private final static String PROPERTIES_FILE_PATH = "/META-INF/maven/net.java.jinput/coreapi/pom.properties";

    /** Singleton instance. */
    private static final PomProperties INSTANCE = new PomProperties();

    /** {@link Properties} object containing either the default or loaded properties. */
    private final Properties properties = new Properties();


    /** Private constructor to prevent instantiation. */
    private PomProperties() {
        properties.setProperty("artifactId", "Unknown");
        properties.setProperty("groupId", "Unknown");
        properties.setProperty("version", "Unversioned");

        loadProperties();
    }

    /** Attempts to load the Maven properties file into {@code properties}. */
    private void loadProperties() {
        try (
            final InputStream is = PomProperties.class.getResourceAsStream(PROPERTIES_FILE_PATH);
        ) {
            Objects.requireNonNull(is);
            properties.load(is);
        } catch (final IOException | NullPointerException e) {
            final Logger logger = Logger.getLogger(PomProperties.class.getName());
            logger.warning("Failed to load properties file: " + PROPERTIES_FILE_PATH);
        }
    }

    /**
     * Retrieves the artifactId of this implementation.
     *
     * @return The artifactId of this implementation.
     */
    public static String getArtifactId() {
        return INSTANCE.properties.getProperty("artifactId");
    }

    /**
     * Retrieves the groupId of this implementation.
     *
     * @return The groupId of this implementation.
     */
    public static String getGroupId() {
        return INSTANCE.properties.getProperty("groupId");
    }

    /**
     * <p>Retrieves the version string and build number of this implementation.</p>
     *
     * <p>Valid version numbers are of the form {@code major.minor.minor-minor}, where:</p>
     *
     * <ul>
     *     <li>
     *         <em>major</em> - The major version number of the release.
     *         <ul>
     *             <li>
     *                 This number starts at <em>1</em>.
     *             </li>
     *             <li>
     *                 A bump in the major version number signifies that the release breaks backwards compatibility with
     *                 some older release.
     *             </li>
     *         </ul>
     *     </li>
     *     <li>
     *         <em>minor</em> - The minor version number of the release.
     *         <ul>
     *             <li>
     *                 This number starts at <em>0</em>.
     *             </li>
     *             <li>
     *                 A bump in the minor version number signifies a release that has significant new functionality.
     *             </li>
     *         </ul>
     *     </li>
     *     <li>
     *         <em>minor-minor</em> - The minor-minor version number of the release.
     *         <ul>
     *             <li>
     *                 This number starts at <em>0</em>.
     *             </li>
     *             <li>
     *                 A bump in the minor-minor version number signifies that new bug fixes have been added to the
     *                 build.
     *             </li>
     *         </ul>
     *     </li>
     * </ul>
     *
     * For example, the following are all valid version strings:
     * <ul>
     *   <li>1.1.2</li>
     *   <li>1.3.5-SNAPSHOT</li>
     *   <li>4.7.1-M2</li>
     * </ul>
     *
     * @return The version string and build number of this implementation.
     */
    public static String getVersion() {
        return INSTANCE.properties.getProperty("version");
    }
}
